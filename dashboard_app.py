import streamlit as stimport pandas as pdimport plotly.express as pximport plotly.graph_objects as go# Charger les donnéesgithub_url = 'https://github.com/IliesElJ/Infrastructure_3A/blob/florent/DataTesla.csv'df= pd.read_csv('/Users/ismailje/Downloads/DataTesla.csv')# Sidebar avec filtres spécifiquesst.sidebar.title("Filtres")# Sidebar pour les données financièresst.sidebar.header("Données financières")selected_financial_metrics = st.sidebar.multiselect('Sélectionnez les métriques financières', ['Tesla Stock Price', 'NASDAQ Composite', 'S&P 500', 'Oil Price'])# Sidebar pour les données de décèsst.sidebar.header("Données de décès")selected_death_metrics = st.sidebar.multiselect('Sélectionnez les métriques de décès', ['Deaths', 'Deaths Lag 1', 'Deaths Lag 7', 'Deaths Lag 30'])# Sidebar pour les données Twitterst.sidebar.header("Données Twitter")selected_twitter_metrics = st.sidebar.multiselect('Sélectionnez les métriques Twitter', ['Tweets of Elon Musk', 'Tweet with mention Tesla', 'Tweet Likes', 'Retweet'])# Filtrer les donnéesfiltered_data = df[selected_financial_metrics + selected_death_metrics + selected_twitter_metrics]# Graphique linéaire pour les métriques temporellesst.title("Visualisation des données temporelles")# Financial Metricsfor metric in selected_financial_metrics:    if metric in selected_financial_metrics:        fig_financial = go.Figure()        fig_financial.add_trace(go.Scatter(x=df['Date'], y=df[metric], mode='lines', name=metric))        fig_financial.update_layout(title=f"Évolution de {metric} au fil du temps", xaxis_title="Date", yaxis_title="Valeur")        st.plotly_chart(fig_financial)# Deaths and Tweets Normalization and Plottingst.title("Évolution des décès et de l'activité Twitter normalisée")normalized_data = pd.DataFrame()# Plot all selected Death Metricsif selected_death_metrics:    fig_deaths = go.Figure()    for metric in selected_death_metrics:        normalized_metric = metric + ' (normalized)'        max_value = df[metric].max()        if max_value != 0:            normalized_data[normalized_metric] = df[metric] / max_value            fig_deaths.add_trace(go.Scatter(x=df['Date'], y=normalized_data[normalized_metric], mode='lines', name=normalized_metric))    fig_deaths.update_layout(title="Évolution des décès normalisés au fil du temps", xaxis_title="Date", yaxis_title="Valeur normalisée")    st.plotly_chart(fig_deaths)# Normalize and plot all selected Twitter Metricsif selected_twitter_metrics:    fig_twitter = go.Figure()    for metric in selected_twitter_metrics:        normalized_metric = metric + ' (normalized)'        max_value = df[metric].max()        if max_value != 0:            normalized_data[normalized_metric] = df[metric] / max_value            fig_twitter.add_trace(go.Scatter(x=df['Date'], y=normalized_data[normalized_metric], mode='lines', name=normalized_metric))    fig_twitter.update_layout(title="Évolution de l'activité Twitter normalisée au fil du temps", xaxis_title="Date", yaxis_title="Valeur normalisée")    st.plotly_chart(fig_twitter)